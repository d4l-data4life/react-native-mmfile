///
/// JHybridMmfileSpec.cpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#include "JHybridMmfileSpec.hpp"

// Forward declaration of `ArrayBuffer` to properly resolve imports.
namespace NitroModules { class ArrayBuffer; }

#include <NitroModules/ArrayBuffer.hpp>
#include <NitroModules/JArrayBuffer.hpp>
#include <NitroModules/JUnit.hpp>

namespace margelo::nitro::mmfile {

  jni::local_ref<JHybridMmfileSpec::jhybriddata> JHybridMmfileSpec::initHybrid(jni::alias_ref<jhybridobject> jThis) {
    return makeCxxInstance(jThis);
  }

  void JHybridMmfileSpec::registerNatives() {
    registerHybrid({
      makeNativeMethod("initHybrid", JHybridMmfileSpec::initHybrid),
    });
  }

  size_t JHybridMmfileSpec::getExternalMemorySize() noexcept {
    static const auto method = javaClassStatic()->getMethod<jlong()>("getMemorySize");
    return method(_javaPart);
  }

  // Properties
  double JHybridMmfileSpec::getSize() {
    static const auto method = javaClassStatic()->getMethod<double()>("getSize");
    auto __result = method(_javaPart);
    return __result;
  }

  // Methods
  void JHybridMmfileSpec::resize(double newSize) {
    static const auto method = javaClassStatic()->getMethod<void(double /* newSize */)>("resize");
    method(_javaPart, newSize);
  }
  void JHybridMmfileSpec::clear() {
    static const auto method = javaClassStatic()->getMethod<void()>("clear");
    method(_javaPart);
  }
  void JHybridMmfileSpec::append(const std::shared_ptr<ArrayBuffer>& buffer) {
    static const auto method = javaClassStatic()->getMethod<void(jni::alias_ref<JArrayBuffer::javaobject> /* buffer */)>("append");
    method(_javaPart, JArrayBuffer::wrap(buffer));
  }
  void JHybridMmfileSpec::write(double offset, const std::shared_ptr<ArrayBuffer>& buffer) {
    static const auto method = javaClassStatic()->getMethod<void(double /* offset */, jni::alias_ref<JArrayBuffer::javaobject> /* buffer */)>("write");
    method(_javaPart, offset, JArrayBuffer::wrap(buffer));
  }
  double JHybridMmfileSpec::read(double offset, const std::shared_ptr<ArrayBuffer>& buffer) {
    static const auto method = javaClassStatic()->getMethod<double(double /* offset */, jni::alias_ref<JArrayBuffer::javaobject> /* buffer */)>("read");
    auto __result = method(_javaPart, offset, JArrayBuffer::wrap(buffer));
    return __result;
  }

} // namespace margelo::nitro::mmfile
