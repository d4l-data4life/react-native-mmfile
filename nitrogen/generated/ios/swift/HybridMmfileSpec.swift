///
/// HybridMmfileSpec.swift
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

import Foundation
import NitroModules

/// See ``HybridMmfileSpec``
public protocol HybridMmfileSpec_protocol: HybridObject {
  // Properties
  var size: Double { get }

  // Methods
  func resize(newSize: Double) throws -> Void
  func clear() throws -> Void
  func append(buffer: ArrayBufferHolder) throws -> Void
  func write(offset: Double, buffer: ArrayBufferHolder) throws -> Void
  func read(offset: Double, buffer: ArrayBufferHolder) throws -> Double
}

/// See ``HybridMmfileSpec``
public class HybridMmfileSpec_base {
  private weak var cxxWrapper: HybridMmfileSpec_cxx? = nil
  public func getCxxWrapper() -> HybridMmfileSpec_cxx {
  #if DEBUG
    guard self is HybridMmfileSpec else {
      fatalError("`self` is not a `HybridMmfileSpec`! Did you accidentally inherit from `HybridMmfileSpec_base` instead of `HybridMmfileSpec`?")
    }
  #endif
    if let cxxWrapper = self.cxxWrapper {
      return cxxWrapper
    } else {
      let cxxWrapper = HybridMmfileSpec_cxx(self as! HybridMmfileSpec)
      self.cxxWrapper = cxxWrapper
      return cxxWrapper
    }
  }
}

/**
 * A Swift base-protocol representing the Mmfile HybridObject.
 * Implement this protocol to create Swift-based instances of Mmfile.
 * ```swift
 * class HybridMmfile : HybridMmfileSpec {
 *   // ...
 * }
 * ```
 */
public typealias HybridMmfileSpec = HybridMmfileSpec_protocol & HybridMmfileSpec_base
